#include<stdio.h>
#include<stdlib.h>

// Node of the linked list
typedef struct Node {
	int data;
	struct Node *link;
} Node;

// Handle of the list. Its head points to the first node in the list.
typedef struct List {
	Node *head;
	int number_of_nodes;
} List;

// Initializes a linked list
List* list_initialize();

// Creates a node and stores the data
Node* create_node(int);

// Deletes the node at the given position
// Does not delete anything if position is out of range
void del_at_pos(int, List*);

// Displays the contents of the linked list in space seperated manner.
void display(List*);

// Inserts an element into an ordered linked list.
void insert_in_order(int, List*);

// Returns the index of the key in the linked list.
// Returns -1 if key not found
int find_key(int, List*);

// Destroy the list by freeing all the nodes.
void destroy_list(List*);

int main()
{
    int choice,element,position,index;

    // Initialize an empty list.
    List* sll = list_initialize();
    do
    {   
        scanf("%d", &choice);
        switch(choice)
        {
            // Delete at given position
            case 1:
            {        
                scanf("%d", &position);
                del_at_pos(position, sll);
            }
            break;
        
            // Insert element into the ordered list.
            case 2: 
            { 
                scanf("%d", &element);
                insert_in_order(element, sll);
            }
            break;
            
            // Display the list.
            case 3:
            {
                display(sll);
            }
            break;
            
            // Find the given key.
            case 4:
            {        
                scanf("%d", &element);
                index = find_key(element, sll);
                printf("%d\n",index);
            }
            break;
            default:
                break;
        }
    }
    while(choice != 0);

    destroy_list(sll);

    return 0;
}

List* list_initialize()
{
    List* sll=(List*)malloc(sizeof(List));
    sll->number_of_nodes=0;
    sll->head=NULL;
    return sll;
}

Node* create_node(int data1)
{
    Node* new_node=(Node*)malloc(sizeof(Node));
    new_node->data=data1;
    new_node->link=NULL;
    return new_node;
}

void display(List* sll)
{
    Node* temp=sll->head;
    if(temp==NULL)
    {printf("\n");}
    else{
        while(temp!=NULL)
        {
            printf("%d ",temp->data);
            temp=temp->link;
        }printf("\n");
    }
}

void del_at_pos(int position, List* sll)
{   
    if(position<=0 || position>sll->number_of_nodes)
    {
        return;
    }
    else{
    Node * temp= sll->head ;
    Node * prev= NULL ;
    for (int i=1 ; i< position ; i++)
    {
        prev=temp;
        temp=temp->link;
    }
    if(prev==NULL)
    {
        sll->head=temp->link;
    }
    else
    {
        prev->link=temp->link;
    }
    free(temp);
    temp=NULL;
    --sll->number_of_nodes;
    }
}

void insert_in_order(int element, List* sll)
{
    Node* present=sll->head;
    Node* temp=create_node(element);
    Node* prev=NULL;
    while(present!=NULL && present->data > element)
    {
        prev=present;
        present=present->link;
    }
    if(prev!=NULL)
    {
        temp->link=present;
        prev->link=temp;
    }
    else
    {
        temp->link=present;
        sll->head=temp;
    }
    ++sll->number_of_nodes;
}



int find_key(int key, List* sll)
{
    int index=0;
    Node *temp=sll->head;
    while(temp->data!=key && temp->link!=NULL)
    {
        temp=temp->link;
        index++;
    }
    if(temp->data==key)
    {
        return index;
    }
    else
    {
        return -1;
    }
}

void destroy_list(List* sll)
{   
    Node* temp;
    for(temp=sll->head; temp!=NULL; temp=temp->link)
    {
        free(temp);
        free(sll);
    }
}