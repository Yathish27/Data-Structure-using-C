#include <stdio.h>
#include <stdlib.h>

// Node of the linked list
typedef struct Node {
    int data;
    struct Node *prev;
    struct Node *next;
} Node;

// Handle of the list. Its head points to the first node in the list.
typedef struct List {
    Node *head;
    int number_of_nodes;
} List;

// initializes a linked list
List* initialize_list();

// Creates a node and stores the data in it.
Node* create_node(int data);

// Inserts data at the beginning of the List
void insert_front(List* dll, int data);

// Deletes the node at position pos. No operation if pos is out of range.
void position_delete(List* dll, int pos);

// Return index of key in the list(0-based). Return -1 if not found
int search_list(List* dll, int key);

// Prints the entire list. Prints "EMPTY" if the list is empty.
void display(List* dll);

// Deallocates resources held by the list
void destroy_list(List* dll);

int main() {
    List* dll = initialize_list();
    int ele, choice, pos;
    
    do {
        scanf("%d", &choice);

        switch(choice) {
            // Insert at beginning
            case 1:
                scanf("%d", &ele);
                insert_front(dll, ele);
                break;

            // Delete at position
            case 2:
                scanf("%d", &pos);
                position_delete(dll, pos);
                break;

            // Search for element
            case 3:
                scanf("%d", &ele);
                pos = search_list(dll, ele);
                printf("%d\n", pos);
                break;

            // Print entire list
            case 4:
                display(dll);
                break;        
        }
    }
    while (choice != 0);

    destroy_list(dll);
    return 0;
}

List* initialize_list() {
    List*list=(List*)malloc(sizeof(List));
    list->head=NULL;
    list->number_of_nodes=0;
    return list;
    
    
}

Node* create_node(int data) {
    Node*newnode=(Node*)malloc(sizeof(Node));
    newnode->data=data;
    newnode->next=NULL;
    newnode->prev=NULL;
    return newnode;

}

void insert_front(List* dll, int data) {
    Node*newn=create_node(data);
    if(dll->head!=NULL)
      {  dll->head->prev=newn;
        newn->next=dll->head;
        dll->head=newn;}
    else
    {
        dll->head=newn;
    }
    dll->head=newn;
    ++dll->number_of_nodes;
    
    
}

void position_delete(List* dll, int pos) {
    if(pos<0 || pos >(dll->number_of_nodes-1))
        return;
    else if(pos==0 && dll->number_of_nodes==1)
    {
        free(dll->head);
        dll->head=NULL;
    }
    else
{
    Node*curr=dll->head;
    Node*temp=NULL;
    for(int i=0;i<pos;++i)
    {
        temp=curr;
        curr=curr->next;
        
    }
    if(temp==NULL)
    {
       curr->next->prev=NULL;
       dll->head=curr->next;
    }
    else if(curr->next==NULL)
    {   
        temp->next=NULL;
    }
    else
    {
        temp->next=curr->next;
        curr->next->prev=temp;
        curr=NULL;

    }
    free(curr);
    --dll->number_of_nodes;
    
}
}


int search_list(List* dll, int key) {
    int index;
    Node*temp=dll->head;
    for(int i=0;i<dll->number_of_nodes;++i)
    {
        if(temp->data==key)
        {
            return i;
        }
        temp=temp->next;
    }
    return-1;
    

}

void display(List* dll) {
    Node*temp=dll->head;
    if(temp==NULL)
    {
        printf("EMPTY\n");
    }
    else
    {
    while(temp!=NULL)
    {
        printf("%d ",temp->data);
        temp=temp->next;
    }
    printf("\n");

    }
}

void destroy_list(List* dll) 
{
    Node*temp;
    for(temp=dll->head;temp!=NULL;temp=temp->next)
    {
        free(temp);
        free(dll);
    }
}
    